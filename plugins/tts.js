const { cmd } = require('../command');
const axios = require('axios');
const fs = require('fs');
const { exec } = require('child_process');

// Google TTS API ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂± TTS ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂ö‡∂ª‡∑î
cmd({
  pattern: "tts",
  desc: "Convert text to speech",
  category: "tools",
  react: "üó£Ô∏è",
  filename: __filename
}, async (message, match) => {
  try {
    if (!match) return await message.reply("üîä *Please provide text to convert*\nExample: .tts Hello world");

    // ‡∂¥‡∑ä‚Äç‡∂ª‡∂ú‡∂≠‡∑í ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫
    const processingMsg = await message.reply("‚è≥ Processing your TTS request...");

    // ‡∂∑‡∑è‡∑Ç‡∑è‡∑Ä ‡∑É‡∂ö‡∑É‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ (default: English)
    let language = 'en';
    if (match.includes('{')) {
      const langMatch = match.match(/\{([a-z]+)\}/i);
      if (langMatch) {
        language = langMatch[1];
        match = match.replace(langMatch[0], '').trim();
      }
    }

    // Google TTS API URL
    const ttsUrl = `http://translate.google.com/translate_tts?ie=UTF-8&tl=${language}&client=tw-ob&q=${encodeURIComponent(match)}`;

    // ‡∂ï‡∂©‡∑í‡∂∫‡∑ù ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂Ω‡∂∂‡∑è ‡∂ú‡∑ê‡∂±‡∑ì‡∂∏
    const response = await axios({
      method: 'GET',
      url: ttsUrl,
      responseType: 'stream'
    });

    const audioPath = `./temp/${Date.now()}.mp3`;
    const writer = fs.createWriteStream(audioPath);
    response.data.pipe(writer);

    await new Promise((resolve, reject) => {
      writer.on('finish', resolve);
      writer.on('error', reject);
    });

    // ‡∂ï‡∂©‡∑í‡∂∫‡∑ù ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏
    await message.client.sendMessage(message.jid, {
      audio: fs.readFileSync(audioPath),
      mimetype: 'audio/mpeg',
      ptt: true
    });

    // ‡∂¥‡∑ä‚Äç‡∂ª‡∂ú‡∂≠‡∑í ‡∂¥‡∂´‡∑í‡∑Ä‡∑í‡∂©‡∂∫ ‡∂∏‡∂ö‡∑è‡∂Ø‡∑ê‡∂∏‡∑ì‡∂∏
    await processingMsg.delete();

    // ‡∂≠‡∑è‡∑Ä‡∂ö‡∑è‡∂Ω‡∑í‡∂ö ‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂∏‡∂ö‡∑è‡∂Ø‡∑ê‡∂∏‡∑ì‡∂∏
    fs.unlinkSync(audioPath);

  } catch (error) {
    console.error('TTS Error:', error);
    await message.reply("‚ùå Error generating speech. Please try again later.");
  }
});
